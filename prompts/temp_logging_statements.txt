new_line = f'{indent}logger.{level}("{percent_format_string}", {variables_string})\n'
logger.debug("UserUpdateSchema received data: %s", values)
logger.debug("QuestionSetCreateSchema validate_question_ids received values: %s", values)
logger.debug("QuestionSetCreateSchema validate_question_ids received question_ids: %s", question_ids)
logger.debug("QuestionSetCreateSchema validate_group_ids received values: %s", values)
logger.debug("QuestionSetCreateSchema validate_group_ids received group_ids: %s", group_ids)
logger.debug("QuestionSetCreateSchema validate_question_ids received values: %s", values)
logger.debug("QuestionSetCreateSchema validate_question_ids received question_ids: %s", question_ids)
logger.debug("QuestionSetCreateSchema validate_group_ids received values: %s", values)
logger.debug("QuestionSetCreateSchema validate_group_ids received group_ids: %s", group_ids)
logger.debug("LeaderboardSchema validate_user_ids received values: %s", values)
logger.debug("LeaderboardSchema validate_user_ids received user_ids: %s", user_ids)
logger.debug("LeaderboardSchema validate_group_ids received values: %s", values)
logger.debug("LeaderboardSchema validate_group_ids received group_ids: %s", group_ids)
logger.debug("Validation values: %s", values)
logger.error("Database session not provided")
logger.error("Invalid user_id: %s", user_id)
logger.error("Invalid question_id: %s", question_id)
logger.error("Invalid answer_choice_id: %s", answer_choice_id)
logger.debug("Foreign keys validated successfully")
logger.debug("get_current_user called with token: %s", token)
logger.debug("Token expiration: %s", datetime.fromtimestamp(token_exp, tz=timezone.utc))
logger.error("Username not found in token payload")
logger.debug("Token is revoked")
logger.debug("User not found for username: %s", username)
logger.debug("User found: %s", user)
logger.exception("JWT Error: %s", str(e))
logger.error("HTTPException occurred: %s", e.detail)
logger.exception("Unexpected error: %s", str(e))
logger.debug("Checking permission '%s' for user: %s", required_permission, user)
logger.debug("User permissions: %s", user_permissions)
logger.debug("User has permission '%s': %s", required_permission, has_perm)
logger.debug("User role not found")
logger.debug("Generated permission: %s", permission)
logger.debug("Adding permission to the database: %s", permission)
logger.debug("Deleting permission from the database: %s", db_permission.name)
logger.debug("Validating foreign keys for target: %s", target)
logger.debug("Validating relationship: %s", relationship)
logger.error(f"Invalid {foreign_key}: {foreign_key_value}")
logger.warning(f"Foreign key {foreign_key} is None")
logger.debug("Registering validation listener for model: %s", model_class.__name__)
logger.debug("Default role: %s", default_role)
logger.debug("User role: %s", user_role)
logger.debug("Creating role: %s", db_role)
logger.debug("Adding permission %s to role %s", permission_id, db_role.id)
logger.debug("Role created with id %s, name %s, and permissions %s", db_role.id, db_role.name, db_role.permissions)
logger.debug("Superadmin role: %s", superadmin_role)
logger.debug("User role: %s", user_role)
logger.debug("Received question set data: %s", question_set_data)
logger.debug("Question set data after adding db: %s", question_set_data)
logger.debug("Re-instantiated question set: %s", question_set)
logger.debug("Question set created successfully: %s", created_question_set)
logger.error("Validation error: %s", e)
logger.error("Error creating user response: %s", e)
logger.debug("Received update data for question set %d: %s", question_set_id, question_set_data)
logger.debug("Re-instantiated question set for update: %s", question_set)
logger.debug("Question set updated successfully: %s", updated_question_set)
logger.error("Validation error: %s", e)
logger.error("Error updating question set: %s", e)
logger.debug("Received user data: %s", user_data)
logger.debug("User data after adding db: %s", user_data)
logger.debug("Re-instantiated user update: %s", user_update)
logger.debug("User updated successfully: %s", updated_user)
logger.error("Validation error: %s", e)
logger.error("Error updating user: %s", e)
logger.debug("Creating group with data: %s", group_data)
logger.debug("Before calling create_group_crud")
logger.debug("After calling create_group_crud")
logger.debug("Group created successfully: %s", created_group)
logger.debug("Before returning the response")
logger.error("Validation error creating group: %s", e.errors())
logger.exception("Error creating group: %s", str(e))
logger.debug("db_group: %s", db_group)
logger.debug("Updating group with data: %s", group_data)
logger.debug("group: %s", group)
logger.debug("updated_group: %s", updated_group)
logger.error("Validation error updating group: %s", e.errors())
logger.exception("Error updating group: %s", str(e))
logger.debug("Received user response data: %s", user_response_data)
logger.debug("User response data after adding db: %s", user_response_data)
logger.debug("Re-instantiated user response: %s", user_response)
logger.debug("User response created successfully: %s", created_response)
logger.error("Validation error: %s", e)
logger.error("Error creating user response: %s", e)
logger.debug("AuthorizationMiddleware - Requested URL: %s", request.url.path)
logger.debug("AuthorizationMiddleware - Unprotected endpoint, skipping authorization")
logger.debug("AuthorizationMiddleware - Protected endpoint, checking authorization")
logger.debug("Current user: %s", current_user)
logger.debug("AuthorizationMiddleware - CRUD verb: %s", crud_verb)
logger.debug("AuthorizationMiddleware - Required permission: %s", required_permission.name)
logger.debug("AuthorizationMiddleware - User does not have the required permission")
logger.debug("AuthorizationMiddleware - No permission found for the current route and CRUD verb")
logger.debug("AuthorizationMiddleware - No CRUD verb found for the current request method")
logger.debug("AuthorizationMiddleware - Before calling the next middleware or endpoint")
logger.debug("AuthorizationMiddleware - After calling the next middleware or endpoint")
logger.error("HTTPException occurred: %s", e.detail)
logger.error("ValidationError occurred: %s", e.errors())
logger.exception("Unexpected error: %s", str(e))
logger.debug("check_revoked_tokens - Requested URL: %s", request.url.path)
logger.debug("check_revoked_tokens - Unprotected endpoint, skipping blacklist check")
logger.debug("check_revoked_tokens - Token: %s", token)
logger.debug("check_revoked_tokens - Token is revoked")
logger.debug("check_revoked_tokens - Token is not revoked")
logger.error("check_revoked_tokens - Error during DB query: %s", e)
logger.debug("check_revoked_tokens - DB session closed")
logger.debug("check_revoked_tokens - Before calling next middleware or endpoint")
logger.debug("check_revoked_tokens - After calling next middleware or endpoint")
logger.debug("BlacklistMiddleware - Requested URL: %s", request.url.path)
logger.debug("BlacklistMiddleware - After calling check_revoked_tokens")
logger.debug("Looking for .env file at: %s", env_file)
logger.debug("Loading configuration from %s", config_path)
logger.debug("Configuration loaded from toml: %s", config)
logger.error("pyproject.toml file not found at %s", config_path)
logger.error("Required 'tool.app' section not found in pyproject.toml")
logger.debug("Entering load_settings()")
logger.debug("Loading SECRET_KEY from .env file")
logger.debug("SECRET_KEY loaded from .env")
logger.error("Error loading SECRET_KEY from .env: %s", str(e))
logger.debug("Loading settings from pyproject.toml")
logger.debug("Current environment: %s", environment)
logger.debug("Database URL for environment (%s): %s", environment, database_url)
logger.debug("Settings created: %s", settings.model_dump())
logger.error("Missing required setting in pyproject.toml: %s", str(e))
logger.error("Error creating settings instance: %s", str(e))
logger.error("Unexpected error loading settings: %s", str(e))
logger.debug("Exiting load_settings()")
logger.debug("Creating access token with expiration: %s", expire)
logger.debug("Access token created: %s", encoded_jwt)
logger.debug("Decoding access token: %s", token)
logger.debug("Access token decoded: %s", payload)
logger.error("Token has expired")
logger.error("Invalid token")
logger.debug("Running test: %s", request.node.nodeid)
logger.debug("Finished test: %s", request.node.nodeid)
logger.debug("Begin setting up database fixture")
logger.debug("Finished setting up database fixture")
logger.debug("Begin tearing down database fixture")
logger.debug("Finished tearing down database fixture")
logger.debug("Begin setting up client fixture")
logger.debug("Finished setting up client fixture")
logger.debug("Finished tearing down client fixture")
logger.debug("Setting up test_user fixture")
logger.exception("Error in test_user fixture: %s", str(e))
logger.debug("Tearing down test_user fixture")
logger.debug("Setting up test_group fixture")
logger.exception("Error in test_group fixture: %s", str(e))
logger.debug("Tearing down test_group fixture")
logger.debug("Setting up test_user_with_group fixture")
logger.exception("Error in test_user_with_group fixture: %s", str(e))
logger.debug("Tearing down test_user_with_group fixture")
logger.debug("Setting up test_question_set_data fixture")
logger.exception("Error in test_question_set_data fixture: %s", str(e))
logger.debug("Tearing down test_question_set_data fixture")
logger.debug("Setting up test_question_set fixture")
logger.exception("Error in test_question_set fixture: %s", str(e))
logger.debug("Tearing down test_question_set fixture")
logger.debug("Setting up test_questions fixture")
logger.exception("Error in test_questions fixture: %s", str(e))
logger.debug("Tearing down test_questions fixture")
logger.debug("Setting up test_subject fixture")
logger.exception("Error in test_subject fixture: %s", str(e))
logger.debug("Tearing down test_subject fixture")
logger.debug("Setting up test_topic fixture")
logger.exception("Error in test_topic fixture: %s", str(e))
logger.debug("Tearing down test_topic fixture")
logger.debug("Setting up test_subtopic fixture")
logger.exception("Error in test_subtopic fixture: %s", str(e))
logger.debug("Tearing down test_subtopic fixture")
logger.debug("Setting up test_question fixture")
logger.exception("Error in test_question fixture: %s", str(e))
logger.debug("Tearing down test_question fixture")
logger.debug("Setting up test_token fixture")
logger.exception("Error in test_token fixture: %s", str(e))
logger.debug("Tearing down test_token fixture")
logger.debug("Setting up test_answer_choice_1 fixture")
logger.exception("Error in test_answer_choice_1 fixture: %s", str(e))
logger.debug("Tearing down test_answer_choice_1 fixture")
logger.debug("Setting up test_answer_choice_2 fixture")
logger.exception("Error in test_answer_choice_2 fixture: %s", str(e))
logger.debug("Tearing down test_answer_choice_2 fixture")
logger.debug("Setting up logged_in_client fixture")
logger.debug("Logging in with username: %s", test_user_with_group.username)
logger.debug("Login response status code: %s", response.status_code)
logger.debug("Access token added to client headers")
logger.exception("Error in logged_in_client fixture: %s", str(e))
logger.debug("Tearing down logged_in_client fixture")
logger.debug("Setting up filter questions data")
logger.exception("Error in setup_filter_questions_data fixture: %s", str(e))
logger.debug("Tearing down setup_filter_questions_data fixture")
logger.debug("Response: %s", response.json())
logger.debug("Response: %s", response.json())
logger.debug("Response: %s", response.json())
logger.debug("Running POST request to /user-responses/ with missing data")
logger.debug("Response: %s", response.json())
logger.debug("test_create_group - Creating group data")
logger.debug("test_create_group - Sending POST request to /groups with data: %s", group_data)
logger.debug("test_create_group - Response received: %s", response.text)
logger.info("Running test_create_group_with_logged_in_client")
logger.debug("Creating group data")
logger.debug("Sending POST request to /groups with data: %s", group_data)
logger.debug("Response received: %s", response.text)
logger.debug("Response status code: %s", response.status_code)
logger.debug("Response data: %s", data)
logger.info("Running test_create_group_with_manual_auth")
logger.debug("Authenticating user")
logger.debug("Sending POST request to /login with data: %s", login_data)
logger.debug("Response received: %s", response.text)
logger.debug("Response status code: %s", response.status_code)
logger.debug("Access token retrieved: %s", access_token)
logger.debug("Creating group data")
logger.debug("Sending POST request to /groups with data: %s and headers: %s", group_data, headers)
logger.debug("Response received: %s", response.text)
logger.debug("Response status code: %s", response.status_code)
logger.debug("Response data: %s", data)
logger.debug("Response received: %s", response.json())
logger.debug("Response received: %s", response.json())
logger.debug("Response received: %s", response.json())
logger.debug(response.json())
logger.debug("test_question_set: %s", test_question_set)
logger.debug("response: %s", response.json())
logger.debug("data: %s", data)
logger.debug("response: %s", response.json())
logger.debug("Permissions read: %s", read_permissions)
logger.debug("Permissions list: %s", permissions_id_list)
logger.debug("Permissions name list: %s", permissions_name_list)
logger.debug("Role data: %s", role_data)
logger.debug("Role created: %s", role)
logger.debug("Role permissions: %s", role.permissions)
logger.debug("Permissions read: %s", permissions)
logger.debug("Permissions list: %s", permissions_id_list)
logger.debug("Permissions name list: %s", permissions_name_list)
logger.debug("Role data: %s", role_data)
logger.debug("Created role: %s", created_role)
logger.debug("Created role permissions: %s", created_role.permissions)
logger.debug("Update data: %s", update_data)
logger.debug("Updated role: %s", updated_role)
logger.debug("Updated role permissions: %s", updated_role.permissions)