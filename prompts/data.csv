ID,Work Item Type,Title,State,Tags,Acceptance Criteria,Description
"166","User Story","Add badge to README","Closed",,,"<b>Azure Boards + GitHub is ready!</b><br><div>Your Azure Boards project is ready and connected to GitHub.<br> </div><div><br> </div><div>See the <a href=""https://aka.ms/azureboardsgithub"">GitHub &amp; Azure Boards</a> documentation for more information about the integration.<br> </div><div><br> </div>If you chose to create a linked pull request, you’ll see that a commit and pull request have already been linked. Click the pull request title to review and merge in the commit to add the badge for this board to your repository’s README. See the <a href=""https://aka.ms/azureboardsgithub-badge"">status badge configuration</a> documentation for more information about configuring your badge."
"242","Epic","Quiz App Backend Development","Active","backend; development; fastapi",,"Develop a comprehensive and scalable backend system for the quiz application using FastAPI. Implement features for user account management, question set management, filtering and randomization, user response tracking, and API endpoints. Ensure the backend is secure, efficient, and follows best practices in terms of architecture, testing, and deployment. The goal is to provide a robust and maintainable backend foundation for the quiz app frontend."
"243","Feature","User Account Management","New","authentication; jwt; user-management",,"Implement a user account management system in the quiz app backend to handle user registration, authentication, and authorization. Use JSON Web Tokens (JWT) for secure authentication and include endpoints for user registration, login, and logout. Store user information securely in the database and provide necessary API endpoints for user profile management."
"244","User Story","JWT-based Authentication","Closed","authentication; jwt; security","JWT token generation implemented
User info and expiration in payload
token signing with Secure key
JWT verification for protected APIs
Proper token validation and error handling
Secure storage of JWT secret key
integration with User login/logout flow
tested with different auth scenarios","Implement JSON Web Token (JWT) based authentication in the quiz app backend for secure user session management. Generate and sign JWT tokens upon successful user login, and include user information and token expiration time in the token payload. Verify and validate JWT tokens for protected API endpoints, ensuring only authenticated users can access restricted resources."
"245","Task","Create auth.py file","Closed","authentication",,"Create auth.py file to handle JWT implementation"
"246","Task","Update user model in models.py","Closed","models",,"Update the user model in models.py for JWT"
"247","Task","Implement JWT token verification in dependencies.py","Closed","dependencies",,"Implement JWT token verification in dependencies.py"
"248","User Story","User Registration","Closed","user-registration","User registration endpoint created
Accepts username email Password
validates Input Data
Checks for existing User records
Securely stores User info in database
Returns success/error response
Password hashing implemented
tested with different registration scenarios","Implement user registration functionality in the quiz app backend to allow new users to create an account. Provide an API endpoint for user registration that accepts user information such as username, email, and password. Validate the input data, check for existing user records, and securely store the user information in the database upon successful registration."
"249","Task","Implement user registration in auth.py","Closed","registration",,"Implement user registration functionality in auth.py"
"250","Task","Define user schema in schemas.py","Closed","schema",,"Define the user schema in schemas.py for user registration"
"251","Task","Handle database operations in crud.py","Closed","crud",,"Handle user creation database operations in crud.py"
"252","User Story","User Login and Logout","Closed","jwt; logout; user-login","User login endpoint created
Accepts username and Password
validates User credentials
Generates JWT token on success
Handles invalid credentials
User logout endpoint created
Invalidates or revokes JWT token
Returns success/error response
tested with different login scenarios","Implement user login and logout functionality in the quiz app backend to allow registered users to securely authenticate and manage their sessions. Provide API endpoints for user login that accept username and password, validate the credentials, and generate a JWT token upon successful authentication. Implement user logout by invalidating or revoking the JWT token."
"253","Task","Implement user login in auth.py","Closed","login",,"Implement user login functionality in auth.py"
"254","Task","Implement user logout in auth.py","Closed","logout",,"Implement user logout functionality in auth.py"
"255","Feature","Question Set Management","New","crud; question-sets",,"Develop a feature for managing question sets in the quiz app backend. Implement functionality to allow users to create, retrieve, update, and delete question sets. Store question sets in the database with relevant metadata such as title, description, tags, and difficulty level. Provide API endpoints for performing CRUD operations on question sets."
"256","User Story","Question Set Uploads","Closed","json; question-upload","Question set upload endpoint created
Accepts JSON file with questions
Parses and validates JSON Data
Extracts questions answers metadata
stores Question set in the database
Returns success/error response
Handles file upload and processing
tested with different JSON files","Implement functionality to allow users to upload question sets in JSON format to the quiz app backend. Provide an API endpoint that accepts a JSON file containing an array of questions, along with their answers, explanations, and metadata. Parse and validate the JSON data, and store the question set in the database for future use."
"257","Task","Create question_sets.py file","Closed","question-sets",,"Create question_sets.py file to handle question set uploads"
"258","Task","Define question set model in models.py","Closed","models",,"Update models.py to define the question set model"
"259","Task","Create question set schema in schemas.py","Closed","schema",,"Define the question set schema in schemas.py"
"260","User Story","Database Storage","Closed","database; postgresql; sqlite","<ul><li>SQLite set up for development </li><li>database models defined for Question sets </li><li>Question text answers explanations stored </li><li>Tags and difficulty level fields included </li><li>database migrations implemented </li><li>Proper database connection handling
tested with different storage scenarios </li> </ul>","<ul><li>Set up the database storage for the quiz app backend to store question sets. </li><li>Use SQLite for the development environment. </li><li>Define the necessary database models and schemas for storing question sets, including fields for question text, answer options, correct answer, explanations, tags, and difficulty level. </li><li>Implement database migrations to manage schema changes. </li> </ul>"
"261","Task","Configure SQLite database in database.py","Closed","database",,"Configure SQLite database in database.py for development"
"262","Task","Configure PostgreSQL database for production","New","database",,"Configure PostgreSQL database for production environment"
"263","User Story","Public/Private Question Sets","Closed","question-sets","Public/private flag added to Question set model and schema","Allow users to mark question sets as public or private."
"264","Task","Implement public/private flags in question_sets.py","Closed","question-sets",,"Implement public/private flags for question sets in question_sets.py"
"265","Task","Update question set model for public/private","Closed","models",,"Update the question set model in models.py to support public/private"
"266","Feature","Filtering and Randomization","Active","filtering; randomization",,"Develop filtering and randomization capabilities for the quiz app backend to enable dynamic question selection. Implement filtering options to allow users to select questions based on specific criteria such as subject, topic, subtopic, difficulty level, or tags. Develop randomization logic to generate random subsets of questions from the filtered pool, ensuring a diverse and unpredictable quiz experience."
"267","User Story","Filtering Options","Closed","criteria; filtering","Filtering API endpoints created
Accepts subject topic subtopic difficulty
Accepts Tags for advanced Filtering
Retrieves matching questions from database
Returns Filtered questions in structured format
Proper validation and error handling","Implement filtering options in the quiz app backend to allow users to narrow down the question pool based on specific criteria. Provide API endpoints that accept filtering parameters such as subject, topic, subtopic, difficulty level, or tags. Retrieve questions from the database that match the specified criteria and return them in a structured format for the frontend to display."
"268","Task","Create filters.py file","Closed","filters",,"Create filters.py file to handle question filtering"
"269","Task","Implement question filtering in models.py","Closed","models",,"Implement question filtering capabilities in models.py"
"270","User Story","Randomization Logic","Resolved","randomization","randomization function for questions and answer choices implemented and tested","Implement logic to randomize questions and answer choices."
"271","Task","Create randomization.py file","Closed","randomization",,"Create randomization.py to handle question/answer randomization"
"272","Feature","Response Tracking","Active","response-tracking",,"Record user responses including correctness and timestamps."
"273","User Story","Track User Answers","Closed","response-tracking","User response model created with fields for User ID Question ID selected answer Correctness and timestamp
CRUD functions implemented for User responses","Design a system to record user answers with timestamps and correctness."
"274","Task","Create crud functions and endpoints to track user responses","Closed","responses",,"<div>Create crud functions and endpoints to track user responses to questions. </div>"
"275","Task","Define user response models","Closed","models",,"<div>Update models to properly define the user response model </div>"
"276","Task","Define the user response schemas","Closed","schema",,"<div>Define the user response schemas </div>"
"277","Feature","API Endpoints","New","api",,"Develop RESTful API endpoints for core functionality."
"278","User Story","User Management Endpoints","Closed","api; user-management","User registration endpoint
User profile retrieval and update endpoints
Proper Authentication and authorization
validation and error handling","Develop endpoints for user registration and management."
"279","Task","Implement user endpoints","Closed","api",,"<div>Implement user management API endpoints </div>"
"280","User Story","Question Set Endpoints","Closed","api; question-sets","Question set creation endpoint
Question set retrieval update delete endpoints
Proper validation and error handling
Authentication and authorization","Develop endpoints for question set CRUD operations."
"281","Task","Implement question set endpoints","Closed","api",,"Implement question set API endpoints in main.py"
"282","User Story","Filtering Endpoints","Active","api; filtering","Filtering endpoints implemented
Accepts Filtering parameters
Queries database efficiently
Returns paginated Results
Proper validation and error handling
tested with different Filtering scenarios","Develop API endpoints for filtering questions based on various criteria such as subject, topic, subtopic, difficulty level, or tags. The endpoints should accept filtering parameters, query the database efficiently, and return the filtered results in a paginated manner. Proper validation and error handling should be implemented."
"283","Task","Implement filtering endpoints","Active","api",,"<div>Implement question filtering API endpoints </div>"
"284","User Story","Response Submission Endpoints","New","api; user-response","- User response submission endpoint
Accepts and validates user's answer
Stores answer timestamp correctness
User response retrieval endpoint
Supports filtering and pagination
Tested with different scenarios","Develop API endpoints for submitting and retrieving user responses to quiz questions. The submission endpoint should accept the user's answer, validate it, and store it along with the timestamp and correctness status. The retrieval endpoint should allow fetching user responses based on filters like user ID, question ID, or time range, with pagination support."
"285","Task","Implement response submission endpoints","New","api",,"Implement user response submission endpoints in main.py"
"286","User Story","API Documentation","New","api; documentation","Swagger UI integrated with FastAPI
all endpoints documented
Request/response models defined
Authentication mechanisms explained
Clear descriptions and examples
Interactive and User-friendly docs","Utilize FastAPI's built-in Swagger UI to automatically generate interactive API documentation for the quiz app backend. Ensure all API endpoints, request/response models, and authentication mechanisms are properly documented. Include clear descriptions, examples, and any necessary instructions for using the API effectively."
"287","Task","Add docstrings to endpoint functions","New","api",,"Add docstrings to all endpoint functions for Swagger UI"
"288","Feature","Security Considerations","New","security",,"Implement security measures in the quiz app backend to protect against common vulnerabilities and ensure the integrity of the system. This includes input validation, secure authentication and authorization mechanisms, protection against injection attacks, and proper error handling. Conduct security testing and follow OWASP guidelines to harden the backend security."
"289","User Story","Input Validation","New","security; validation","Input validation implemented
User credentials validated
Question content sanitized
API parameters validated
injection attacks prevented
XSS and other attacks mitigated","Implement strict input validation for all user inputs in the quiz app backend to prevent potential security vulnerabilities. Validate and sanitize input data, such as user credentials, question content, and API parameters, to mitigate the risk of injection attacks, cross-site scripting (XSS), and other malicious activities."
"290","Task","Implement input validation","New","security",,"Implement input validation in all endpoint-related files"
"291","User Story","CORS Configuration","New","cors; security","CORS configuration implemented
Appropriate CORS headers set
Access control policies defined
Requests from allowed origins accepted
Unauthorized Access prevented
tested with different origin scenarios","Configure Cross-Origin Resource Sharing (CORS) settings in the quiz app backend to control access from different origins. Implement appropriate CORS headers and policies to allow or restrict requests from specific domains, ensuring the backend API can be consumed by authorized clients while preventing unauthorized access."
"292","Task","Configure CORS in main.py","New",,,"Configure CORS settings in main.py"
"293","Feature","Extra Features (Optional)","New","extra-features",,"Implement additional features in the quiz app backend to enhance the user experience and provide more value. This may include features like a scoring system, leaderboards, achievement badges, time tracking, personalized recommendations, or a review mode for incorrect answers. These features should be designed and implemented based on user feedback and business requirements."
"294","User Story","Scoring System","New","leaderboard; scoring","Scoring system implemented
Scores calculated based on factors
User Scores stored and updated
Leaderboard API endpoints provided
Top Scores retrieved and displayed
tested with different scenarios","Implement a scoring system in the quiz app backend to track users' performance and provide a competitive element. Calculate scores based on factors like accuracy, speed, and difficulty level. Store and update user scores in the database, and provide API endpoints for retrieving and displaying leaderboards."
"295","Task","Create scoring.py file","New","scoring",,"Create scoring.py to implement a scoring system"
"296","Task","Update models.py for scoring","New","models",,"Update models.py to support scoring data"
"297","Task","Define scoring schemas","New","schema",,"Define scoring related schemas in schemas.py"
"298","User Story","Review Mode","New","learning; review-mode","Review mode implemented
Quiz result summary generated
incorrect answers highlighted
Detailed explanations provided
Reference materials linked
User progress tracked
tested with different Quiz scenarios","Implement a review mode feature in the quiz app backend to allow users to review their incorrect answers and learn from their mistakes. After completing a quiz, users should be able to access a summary of their results, highlighting the questions they answered incorrectly. Provide detailed explanations and references for each incorrect answer to facilitate learning."
"299","Task","Create review.py file","New","review",,"Create review.py to implement review mode"
"300","Task","Update models.py for review mode","New","models",,"Update models.py to support review mode"
"301","Epic","Testing and Deployment","New","deployment; testing",,"Implement comprehensive testing for the quiz app backend to ensure its quality and reliability. Develop unit tests for individual components and integration tests for the API endpoints. Set up an automated CI/CD pipeline to streamline the deployment process, and deploy the backend to a production environment, following containerization best practices. Conduct thorough performance testing to optimize the backend's performance and scalability."
"302","Feature","Unit Testing","New","testing",,"Develop comprehensive unit tests for the quiz app backend to verify the functionality of individual components. This includes tests for models, CRUD operations, utility functions, and other backend logic. The tests should aim for high coverage, validate edge cases, and ensure the correctness of the implemented features."
"303","User Story","Test CRUD Operations","New","crud; testing","Unit tests for all CRUD operations
Positive and negative scenarios covered
error handling tested
Data integrity validated
all tests passing with good coverage","Create unit tests for all CRUD (Create, Read, Update, Delete) operations in the quiz app backend. This includes tests for creating, retrieving, updating, and deleting questions, question sets, user accounts, and user responses. The tests should validate the functionality, error handling, and data integrity of the CRUD operations."
"304","Task","Implement CRUD tests","New","testing",,"Write unit tests for CRUD operations"
"305","User Story","Test API Endpoints","New","api; endpoints; testing","Unit tests created for all API endpoints
Positive and negative scenarios covered
Input/output validation tests
Edge cases and error handling tested
all tests passing with good coverage","Create comprehensive unit tests for all the API endpoints of the quiz app backend. This includes tests for CRUD operations on questions, question sets, user accounts, and user responses. The tests should cover positive and negative scenarios, validate input/output, and ensure the API endpoints behave as expected."
"306","Task","Implement API tests","New","testing",,"Write unit tests for API endpoints"
"307","Feature","Deployment","New","deployment",,"Deploy the quiz app backend to production environment, ensuring it is containerized, automated through CI/CD, and performance tested for optimal operation. This feature aims to streamline the deployment process, reduce manual errors, and guarantee the backend's reliability and scalability in the production environment."
"308","User Story","Dockerize Application","New","deployment; docker","Dockerfile created
Image builds successfully
Container runs without errors
App functions as expected within Container","Create a Dockerfile to containerize the quiz app backend. This will involve specifying the base image, copying the necessary files, installing dependencies, exposing ports, and defining the startup command. The goal is to have a reproducible and portable deployment unit."
"309","Task","Create Dockerfile","New","docker",,"Write a Dockerfile for the quiz app backend"
"310","User Story","Configure CI/CD Pipeline","New","automation; ci/cd","CI/CD pipeline configured
Automated builds and tests
Successful deployments to target environment
Rollback mechanism in place","Set up a CI/CD pipeline for automating the build, testing and deployment processes of the quiz app backend. This will include configuring the version control system, defining the build and test stages, and automating deployments to the target environment based on triggers or schedules, enabling faster and more reliable releases."
"311","Task","Configure CI/CD","New","ci/cd",,"Configure a CI/CD pipeline for the quiz app backend"
"312","User Story","Deploy to Production","New","deployment; release","App deployed to production
environment variables configured
Monitoring and logging set up
Data migrations/initializations done
App accessible to end users","Release the quiz app backend to the production environment, making it available to end users. This involves deploying the containerized application to a production-grade infrastructure, configuring necessary environment variables, setting up monitoring and logging, and performing any required data migrations or initializations."
"313","Task","Deploy backend","New","deployment",,"Deploy the quiz app backend to production"
"314","User Story","Performance Testing","New","optimization; performance; testing","Performance test scenarios designed
Metrics and thresholds defined
Load testing tools set up
Performance tests executed
Results analyzed and bottlenecks identified
Optimizations implemented and verified","Conduct performance testing on the quiz app backend to ensure it can handle the expected load and identify any performance bottlenecks. This will involve designing performance test scenarios, defining metrics and thresholds, using tools to simulate load, analyzing results, and optimizing the application based on the findings."
"315","Task","Perform load testing","New","testing",,"Perform load testing on the deployed backend"
"316","Task","Optimize based on results","New","optimization",,"Optimize the backend based on performance testing results"